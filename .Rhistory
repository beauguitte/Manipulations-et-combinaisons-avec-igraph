#| warning: false
# Chargement du package
# install.packages("igraph")
library(igraph)
# Création des deux réseaux
d1 <- rbind(c("A","B"),c("A","C"), c("B","C"), c("A","D"), c("D","E"))
d2 <- rbind(c("A","F"), c("A","D"), c("A","C"), c("C","I"))
g1 <- graph.data.frame(d1, directed = FALSE)
g2 <- graph.data.frame(d2, directed = FALSE)
#visualisation
par(mfrow = c(1,2))
plot(g1, vertex.color = "yellow", vertex.size = 30, main = "g1")
plot(g2, vertex.color = "yellow", vertex.size = 30, main = "g2")
#| echo: false
#| results: hide
dev.off()
V(g1)$degree <-  degree(g1)
V(g2)$degree <- degree(g2)
E(g1)$between <- edge.betweenness(g1)
E(g2)$between <- edge.betweenness(g2)
g1$densite <- graph.density(g1)
g2$densite <- graph.density(g2)
?graph.complementer
compg1 <- graph.complementer(g1, loops = FALSE)
plot(compg1)
#les attributs des sommets et du graphe sont conservés
#les attributs des liens sont bien entendu perdus
V(compg1)$degree
plot(compg1)
V(compg1)$degree
?graph.disjoint.union
#création d'un réseau autre avec un attribut sur les sommets
d3 <- rbind(c("i","j"),c("j","k"), c("i","k"), c("k","l"), c("l","m"))
s3 <- data.frame(rbind(c("i","1"), c("j","1"), c("k", "2"), c("l",  "2"), c("m","1"))
)
names(s3) <- c("ID", "Attribut1")
View(s3)
g3 <- graph.data.frame(d3, s3, directed = FALSE)
plot(g3)
#union de g1 et g3
gu <- graph.disjoint.union(g1, g3)
plot(gu)
#attribut présent pour certains sommets seulement
V(gu)$Attribut1
gu
uniong <- graph.union(g1,g2) #opérateur %u%
attributes(uniong)
uniong
?graph.union
library(igraph)
?graph.union
?igraph.compose
?compose
?contract
?reverse_edges
library(igraph)
# réseau orienté minimal
d1 <- rbind(c("A","B"),c("B","C"), c("C","D"))
# trnansfoirmation en objet igraph
g1 <- graph.data.frame(d1, directed = TRUE)
# changement de l'orientation des liens
g1inv <- reverse(g1)
# changement de l'orientation des liens
g1inv <- reverse_edges(g1)
plot(g1)
plot(g1inv)
rm(d1, d1inv)
rm(d1, g1, g1inv)
# deux attributs sur les sommets
# un numeric, un string
d2 <- rbind(c("A", 2, "f"),
c("B", 1, "f")
c("C", 2, "m")
# deux attributs sur les sommets
# un numeric, un string
d2 <- rbind(c("A", 2, "f"),
c("B", 1, "f"),
c("C", 2, "m"),
c("D", 1, "m"),
c("E", 2, "m"))
g1 <- graph.data.frame(d1, d2, directed = FALSE)
# réseau comprenant une triade fermée
d1 <- rbind(c("A","B"),c("B","C"), c("C","D"), c("D","E"), c("E","C"))
g1 <- graph.data.frame(d1, d2, directed = FALSE)
g1
# deux attributs sur les sommets
# un numeric, un string
d2 <- rbind(c("name", "attribut1", "attribut2"),
c("A", 2, "f"),
c("B", 1, "f"),
c("C", 2, "m"),
c("D", 1, "m"),
c("E", 2, "m"))
# réseau comprenant une triade fermée
d1 <- as.data.frame(rbind(c("A","B"),c("B","C"), c("C","D"), c("D","E"), c("E","C")))
# réseau comprenant une triade fermée
d1 <- as.data.frame(rbind(c("A","B"),c("B","C"), c("C","D"), c("D","E"), c("E","C")))
names(d1) <- c("Som1","Som2")
# deux attributs sur les sommets
# un numeric, un string
d2 <- rbind(c("A", 2, "f"),
c("B", 1, "f"),
c("C", 2, "m"),
c("D", 1, "m"),
c("E", 2, "m"))
names(d2) <- c("name", "attribut1", "attribut2")
g1 <- graph.data.frame(d1, d2, directed = FALSE)
g1
str(d2)
class(d2)
# deux attributs sur les sommets
# un numeric, un string
d2 <- as.data.frame(rbind(c("A", 2, "f"),
c("B", 1, "f"),
c("C", 2, "m"),
c("D", 1, "m"),
c("E", 2, "m")))
names(d2) <- c("name", "attribut1", "attribut2")
View(d1)
View(d2)
str(d2)
d2$attribut1 <- as.numeric(d2$attribut1)
str(d2)
g1 <- graph.data.frame(d1, d2, directed = FALSE)
g1
g <- make_ring(10)
g$name <- "Ring"
V(g)$name <- letters[1:vcount(g)]
E(g)$weight <- runif(ecount(g))
plot(g)
g
g2 <- contract(g, rep(1:5, each=2),
vertex.attr.comb=toString)
## graph and edge attributes are kept, vertex attributes are
## combined using the 'toString' function.
print(g2, g=TRUE, v=TRUE, e=TRUE)
V(g1)[1]
V(g1)[3]
# contraction des sommets c-d-e
g1c <- contract(g1,
c(V(g1)[3],V(g1)[4],V(g1)[5]),
vertex.attr.comb = min)
# contraction des sommets c-d-e
g1c <- contract(g1,
c(V(g1)[3],V(g1)[4],V(g1)[5]),
vertex.attr.comb = "min")
# contraction des sommets c-d-e
g1c <- contract(g1,
c(V(g1)[3],V(g1)[4],V(g1)[5]),
vertex.attr.comb = toString)
V(g1)[3:5]
# contraction des sommets c-d-e
g1c <- contract(g1,
c(V(g1)[3:5]),
vertex.attr.comb = toString)
# contraction des sommets c-d-e
g1c <- contract(g1,
mapping = c(V(g1)[3:5]),
vertex.attr.comb = toString)
# Create example graph
set.seed(1)
g <- random.graph.game(10, 0.2)
V(g)$group <- rep(letters[1:3], times = c(3, 3, 4))
V(g)$group
# contraction des sommets c-d-e
# création d'un attribut pour savoir quel sommet agréger
g1(V)$atgr <- rep[letters[1:2], times = c(3,2)]
# contraction des sommets c-d-e
# création d'un attribut pour savoir quel sommet agréger
g1(V)$atgr <- rep(letters[1:2], times = c(3,2))
g1 <- graph.data.frame(d1, d2, directed = FALSE)
# contraction des sommets c-d-e
# création d'un attribut pour savoir quel sommet agréger
g1(V)$atgr <- rep(letters[1:2], times = c(2, 3))
g1
# contraction des sommets c-d-e
# création d'un attribut pour savoir quel sommet agréger
V(g1))$atgr <- rep(letters[1:2], times = c(2, 3))
# contraction des sommets c-d-e
# création d'un attribut pour savoir quel sommet agréger
V(g1)$atgr <- rep(letters[1:2], times = c(2, 3))
g1
g1c <- contract(g1,
mapping = factor(V(g)$atgr),
vertex.attr.comb = toString)
factor(V(g)$atgr)
g1c <- contract(g1,
mapping = factor(V(g)$atgr),
vertex.attr.comb = toString)
g1c <- contract(g1,
mapping = V(g)$attribut1,
vertex.attr.comb = "sum")
g1c <- contract(g1,
mapping = factor(V(g)$atgr),
vertex.attr.comb = function(x) levels(factor(x)))
g1c <- contract(g1,
mapping = factor(V(g1)$atgr),
vertex.attr.comb = function(x) levels(factor(x)))
g1c
plot(g1)
plot(g1c)
rm(d1, g1, g1inv)
rm(list=ls())
# réseau où les sommets ont deux attributs ; un qualitatif (3 modalités)
# et un numérique
d1 <- as.data.frame(rbind(c("A","B"),c("B","C"), c("C","D"), c("D","E"), c("E","C")))
names(d1) <- c("Som1","Som2")
# deux attributs sur les sommets
# un numeric, un string
d2 <- as.data.frame(rbind(c("A", 2, "a"),
c("B", 1, "a"),
c("C", 2, "b"),
c("D", 1, "c"),
c("E", 2, "c")))
names(d2) <- c("name", "attribut1", "attribut2")
d2$attribut1 <- as.numeric(d2$attribut1)
g1 <- graph.data.frame(d1, d2, directed = FALSE)
g1
# contraction en fonction de l'attribut2
g1c <- contract(g1,
mapping = factor(V(g1)$attribut2),
vertex.attr.comb = function(x) levels(factor(x)))
g1c
plot(g1c)
v(g1c)$attribut1
V(g1c)$attribut1
class(V(g1c)$attribut1)
# contraction en fonction de l'attribut 1
g1cc <- contract(g1,
mapping = factor(V(g1)$attribut1),
vertex.attr.comb = "sum")
# contraction en fonction de l'attribut 1
g1cc <- contract(g1,
mapping = V(g1)$attribut1,
vertex.attr.comb = "sum")
# contraction en fonction de l'attribut 1
g1cc <- contract(g1,
mapping = V(g1)$attribut1,
vertex.attr.comb = sum)
# contraction en fonction de l'attribut 1
g1cc <- contract(g1,
mapping = V(g1)$attribut1,
vertex.attr.comb = "sum")
g1c
d1 <- as.data.frame(rbind(c("A","B"),c("B","C"), c("C","D"), c("D","E"), c("E","C")))
names(d1) <- c("Som1","Som2")
d2 <- as.data.frame(rbind(c("A", "a"),
c("B", "a"),
c("C", "b"),
c("D", "c"),
c("E", "c")))
names(d2) <- c("name", "attribut")
g1 <- graph.data.frame(d1, d2, directed = FALSE)
g1
# contraction en fonction de l'attribut2
g1c <- contract(g1,
mapping = factor(V(g1)$attribut),
vertex.attr.comb = function(x) levels(factor(x)))
g1c
plot(g1c)
#| warning: false
#| echo: false
rm(d1, g1, g1c)
#| warning: false
#| echo: false
rm(d1, d2, g1, g1c)
d1 <- rbind(c("A","A"),
c("A","B"),
c("B","C"),
c("B","C"),
c("B","C"),
c("C","D"),
c("C","D"))
g1 <- graph.data.frame(d1, directed = FALSE)
g1
is.loop(g1)
is.multiple(g1)
plot(g1)
degree(g1)
g1_2 <- simplify(g1)
plot(g1_2)
# Si je veux garder les liens multiples
g1_3 <- simplify(g1, remove.multiple = FALSE)
plot(g1_3)
# Si je veux garder une trace des boucles et des liens multiples
g1_4 <- simplify_and_colorize(g1)
g1_4
V(g1_4)$color # il y avait une boucle au premier sommet
E(g1_4)$color # il y avait 1 lien, 3 liens, 2 liens
#| warning: false
#| echo: false
rm(d1, g1, g1_2, g1_3, g1_4)
# Création des deux réseaux
d1 <- rbind(c("A","B"),c("A","C"), c("B","C"), c("A","D"), c("D","E"))
d2 <- rbind(c("A","F"), c("A","D"), c("A","C"), c("C","I"))
g1 <- graph.data.frame(d1, directed = FALSE)
g2 <- graph.data.frame(d2, directed = FALSE)
#visualisation
par(mfrow = c(1,2))
plot(g1, vertex.color = "yellow", vertex.size = 30, main = "g1")
plot(g2, vertex.color = "yellow", vertex.size = 30, main = "g2")
#| echo: false
#| warning: false
#| results: hide
dev.off()
V(g1)$degree <-  degree(g1)
V(g2)$degree <- degree(g2)
E(g1)$between <- edge.betweenness(g1)
E(g2)$between <- edge.betweenness(g2)
g1$densite <- graph.density(g1)
g2$densite <- graph.density(g2)
compg1 <- graph.complementer(g1, loops = FALSE)
plot(compg1)
V(compg1)$degree
compg1
diffg1 <- graph.difference(g1, g2)
diffg1
diffg2 <- graph.difference(g2, g1)
# coordonnées (quasi) identiques pour faciliter la comparaison
lay <- layout.fruchterman.reingold(g1)
# lien A-D présent dans g1 et g2 donc g1-g2 et g2-g1 entrainent sa disparition
par(mfrow = c(2,2))
plot(g1, main = "g1", layout = lay, vertex.color = "red", vertex.size = 20, vertex.label.dist =3)
plot(g2, main = "g2", layout = lay, vertex.color = "red", vertex.size = 20, vertex.label.dist =3)
plot(diffg1, main = "graph.difference(g1, g2)", layout = lay, vertex.color = "red", vertex.size = 20, vertex.label.dist =3)
plot(diffg2, main = "graph.difference(g2, g1)", layout = lay, vertex.color = "red", vertex.size = 20, vertex.label.dist =3)
V(diffg1)$degree2 <- degree(diffg1)
V(diffg1)$degree
V(diffg1)$degree2
interg1 <- graph.intersection(g1,g2, keep.all.vertices = TRUE)
#seuls sommets adjacents aux liens communs sont gardés (ici ACD)
interg2 <- graph.intersection(g1,g2, keep.all.vertices = FALSE)
par(mfrow = c(1,2))
plot(interg1, sub = "graph.intersection(g1,g2,\nkeep.all.vertices = TRUE)")
plot(interg2, sub = "graph.intersection(g1,g2,\nkeep.all.vertices = FALSE)")
#| warning: false
#| echo: false
rm(list=ls())
# Création des deux réseaux
d1 <- rbind(c("A","B"),c("A","C"), c("B","C"), c("A","D"), c("D","E"))
d2 <- rbind(c("A","F"), c("A","D"), c("A","C"), c("C","I"))
g1 <- graph.data.frame(d1, directed = FALSE)
# manipulation d'un réseau avec boucle et liens multiples
d1 <- rbind(c("A","A"),
c("A","B"),
c("B","C"),
c("B","C"),
c("B","C"),
c("C","D"),
c("C","D"))
g1 <- graph.data.frame(d1, directed = FALSE)
#| warning: false
library(igraph)
# réseau orienté minimal
d1 <- rbind(c("A","B"),c("B","C"), c("C","D"))
# transformation en objet igraph
g1 <- graph.data.frame(d1, directed = TRUE)
# changement de l'orientation des liens
g1inv <- reverse_edges(g1)
plot(g1)
plot(g1inv)
# manipulation d'un réseau avec boucle et liens multiples
d1 <- rbind(c("A","A"),
c("A","B"),
c("B","C"),
c("B","C"),
c("B","C"),
c("C","D"),
c("C","D"))
g1 <- graph.data.frame(d1, directed = FALSE)
g1
is.loop(g1)
is.multiple(g1)
plot(g1)
degree(g1)
graph.density(g1)
# manipulation d'un réseau avec boucle et liens multiples
d1 <- rbind(c("A","A"),
c("A","B"),
c("B","C"),
c("B","C"),
c("B","C"),
c("C","D"),
c("C","D"))
g1 <- graph.data.frame(d1, directed = FALSE)
g1
is.loop(g1)
is.multiple(g1)
plot(g1)
degree(g1)
density(g1)
g1
density(g1)
?compose
